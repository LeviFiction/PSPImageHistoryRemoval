from JascApp import *
import struct
import os
import time
from Tkinter import Tk # type:ignore
import tkFileDialog # type:ignore

def ScriptProperties():
    return {
        'Author': u'LeviFiciton',
        'Copyright': u'2018',
        'Description': u'This script makes a copy of the current PSPImage file and removes its history v1.2',
        'Host': u'PaintShop Pro',
        'Host Version': u'9.00'
        }

def Do(Environment):
    # if len(App.Documents) < 1:
    #     return #No images open to remove history from
    # Grab Filename
    result = False
    if len(App.Documents) >= 1:
         result = msgBox(Environment, "Do you want to remove history from the current file?", 2, 2)
    if not result:
        root = Tk()
        root.withdraw()
        filenames = tkFileDialog.askopenfilenames(initialdir = "%userprofile%\\Pictures", title = "Select PSPImage file",filetypes = (("PSPImage Files","*.pspimage"),))
        root.destroy()
        if filenames == ('',):
            return
    else:
        filenames = [App.ActiveDocument.Name]

    for filename in filenames:
        newfilename = remove_history(Environment, filename)
        if newfilename and os.path.isfile(newfilename):
            file_open(Environment, newfilename)

def remove_history(Environment, filename):
    # filename = App.TargetDocument.Name
    # filename = filenames[0]
    data_block_start = 0
    data_block_length =  0
    history_field_start = 0
    history_field_length = 0
    history_data_start = 0
    history_data_length = 0
    new_data_block_length = 0
    new_field_length = 0

    if filename == None:
        print("This file is new and hasn't been saved yet")
        return

    original_file = open(filename, 'rb') #Open file

    # Is this a Paintshop pro file
    if 'Paint Shop Pro Image File\n\x1a\x00\x00\x00\x00\x00' != original_file.read(32):
        msgBox(Environment, 'Not a valid PSPImage file')
        return #End function

    #get major and minor version, not really important except to move along
    major,minor = struct.unpack("<HH", original_file.read(4))

    # Loop until we break out
    while 1:
        # Get next block
        block_result = getBlock(Environment, original_file)

        # If result is -1 exit the function
        if block_result == -1:
            return

        # If block is 10 - PSP_EXTENDED_DATA_BLOCK start looking for fields
        if block_result[0] == 10:
            data_block_start = block_result[1]
            data_block_length = block_result[2]
            # Grab current location
            offset = original_file.tell()
            # Send reference to beginning of block and file
            field_result = getParts(Environment, original_file, block_result[1])

            # If a result is returned
            if field_result != -1:
                history_field_start, history_field_length = field_result
                start_time = time.time()
                history_location = get_history_start_and_length(original_file,
                                                      field_result[0],
                                                      field_result[1])
                end_time = time.time()
                if history_location != -1:
                    history_data_start, history_data_length = history_location
                else:
                    msgBox(Environment, "Couldn't find any history in image")
                    original_file.close()
                    return
                break # Break out of loop
            # Jump to end of block and keep going there was no history
            original_file.seek(offset+block_result[1]+10)

    # Calculate new block length
    new_data_block_length = data_block_length - history_data_length
    new_field_length = history_field_length - history_data_length - 10

    path, extension = os.path.splitext(filename)
    newfilename = path + "-NoHistory" + extension
    new_file = open(newfilename,'wb')

    # Go back to beginning of the file
    original_file.seek(0)

    # Copy up to the startng point of our data block length value
    new_file.write(original_file.read(data_block_start + 6))
    # Write new length
    new_file.write(struct.pack("<I", new_data_block_length))
    # Jump over original length
    original_file.read(4)
    # Copy up to the field length
    new_file.write(original_file.read((history_field_start + 6) - original_file.tell()))
    # Update field length
    new_file.write(struct.pack("<I", new_field_length))
    # Jump over original length
    original_file.read(4)
    # Copy up to the history starting tag
    new_file.write(original_file.read(history_data_start - original_file.tell()))
    # Skip over history data
    original_file.read(history_data_length)
    # Copy up to the beginning of the history field
    # Tag start - field start + 6 = how much we've read.
    # New length - read already = how much more to read
    data_left_to_read = new_field_length - (history_data_start - (history_field_start))
    new_file.write(original_file.read(data_left_to_read))
    # Copy the rest of the file
    new_file.write(original_file.read())
    # Close new file
    new_file.close()
    # Close old file
    original_file.close()
    msgBox(Environment, 'Copy successfull:' + newfilename + "\n Total Time: " + str(end_time - start_time), icon=1, buttons=0)
    return newfilename

def get_history_start_and_length(file_obj, offset, length):
    """Finds the starting point of the history section and it's length"""
    # Goes to the beginning of the field data
    file_obj.seek(offset+10)
    counter = offset+10
    while file_obj.read(19) != b"<photoshop:History>" and counter <= (offset + length):
        counter += 1
        file_obj.seek(counter)
    if counter >= (offset + length):
        return -1
    start_of_data = counter
    
    # Consider jumping to end of the section and work backwards.
    # If we get to start_of_data return -1
    # If this works, it should be faster than going through the data 1 byte at a time

    counter += (offset + length)-20 # Jump to end minus 20
    file_obj.seek(counter)
    while file_obj.read(20) != b"</photoshop:History>" and counter >= (start_of_data):
        counter -= 1
        file_obj.seek(counter)
    if counter <= (start_of_data): # No ending tag found
        return -1
    # Total length is the end point + 20 (for the length of the tag) minus the start.
    return start_of_data, (counter - start_of_data)+20

def getParts(Environment, file_obj, offset):
    """Returns the field start and length if it exists"""
    # Goes to beginning of the block
    file_obj.seek(offset)
    # Checks to make sure we are at the beginning
    if file_obj.read(4) != '~BK\x00':
        msgBox(Environment, 'Error reading block from file')
        return -1 #If not return an error code
    # Skip block type we'll assume it's block 10
    file_obj.read(2)
    # Get total length of block to know when we've reached the end
    length = struct.unpack("<I", file_obj.read(4))
    # Loop over fields until end of block
    while (file_obj.tell()-offset) < length[0]:
        # Couldn't find field - this is bad
        if file_obj.read(4) != '~FL\x00':
            msgBox(Environment, 'Error reading Field from file')
            print("Not the beginning of a field")
            return -1
        # We are at a field, grab it's type and length
        field_type = struct.unpack("<H", file_obj.read(2))
        field_length = struct.unpack("<I", file_obj.read(4))
        # Is this field an xml field
        if field_type[0] == 5:
            # Return the beginning of the field, plus the length including the header
            return (file_obj.tell()-10), (field_length[0] + 10)
        # If not xml field, jump over it and test the next one
        file_obj.seek(file_obj.tell() + field_length[0])
    return -1

def getBlock(Environment, file_obj):
    """Returns type, start and length of a block if any"""
    # Grab current location in the file
    offset = file_obj.tell()
    # Is this a block?
    if file_obj.read(4) != '~BK\x00':
        # If not go back to the stating point
        file_obj.seek(offset)
        # Did we reach the end? Or is there more file?
        if file_obj.read(4) != "":
            # Not the end, so something went wrong
            msgBox(Environment, 'Error reading file')
            file_obj.seek(offset)
            print(file_obj.read(4))
            print("Not a valid block")
        return -1
    # Get block type and length
    block_type = struct.unpack("<H", file_obj.read(2))
    block_size = struct.unpack("<I", file_obj.read(4))
    # We are past the header, so just add current location to the length to jump ahead
    file_obj.seek(file_obj.tell() + block_size[0])
    # Return the block type and the offset that represents the start of the block with header
    return block_type[0], offset, block_size[0]

def msgBox(Environment, text, icon=0, buttons=1):
    """Provides a quick MessageBox to the user"""
    result = App.Do(Environment,  'MsgBox', {
            'Buttons': buttons,
            'Icon': icon,
            'Text': text,
            })
    return result

def file_open(Environment, filename):
    folder,_ = os.path.split(filename)
    App.Do( Environment, 'FileOpen', {
        'FileList': [filename], 
        'Folder': folder, 
        'FileFormat': App.Constants.FileFormat.Unknown, 
        'ShowPreview': True, 
        'EnableBrowser': True, 
        'FavFileList': [], 
        'RawCameraSettings': {
            'WhiteBalance': App.Constants.WhiteBalance.AsShot, 
            'SharpenMode': App.Constants.SharpenMode.Low, 
            'Exposure': 0, 
            'Rect': ((0,0), 0, 0), 
            'ShowMaximized': False, 
            'ShowPreview': True
            }, 
        'FileOpenScript': u'', 
        'EnablePreprocessing': False, 
        'GeneralSettings': {
            'ExecutionMode': App.Constants.ExecutionMode.Default, 
            'AutoActionMode': App.Constants.AutoActionMode.Match, 
            'Version': ((25,0,0),1)
            }
        })
